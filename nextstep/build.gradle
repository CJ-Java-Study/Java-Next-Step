plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.sonarqube" version "6.0.1.5171"
    id "jacoco"
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// SonarQube 설정
sonar {
    properties {
        property "sonar.projectName", "cj-java-nextstep" // 프로젝트 이름
        property "sonar.projectKey", "sqp_e09b17190b785c8976e5dc8304d019b2669bff37" // 프로젝트 키
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.host.url", "http://localhost:9000"
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacoco {
    toolVersion = "0.8.13" // https://www.jacoco.org/jacoco/trunk/doc/changes.html
    layout.buildDirectory.dir("reports/jacoco")
}

// 테스트 설정
test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // 테스트 후 JaCoCo 리포트 생성
}

// JaCoCo 리포트 설정
jacocoTestReport {
    dependsOn test // 테스트 종속성 추가
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    // QClass 등 제외할 클래스 설정
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
                    '**/config/**',
                    '**/*Application*',
                    // 필요한 경우 추가 제외 패턴
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification' // 리포트 생성 후 검증 실행
}

// JaCoCo 커버리지 검증 설정
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.30 // 최소 라인 커버리지 비율
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.30 // 최소 브랜치 커버리지 비율
            }

            excludes = [
                    '**.dto.**',
                    '**.config.**',
                    '**.*Application*',
                    // 필요한 경우 추가 제외 패턴
            ]
        }
    }
}